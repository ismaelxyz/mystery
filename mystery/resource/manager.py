import sys
from json import load, loads

from pyglet import gl
from pyglet.font import have_font
from pyglet.font import load as load_font
from pyglet.resource import Loader

FONT_NAME = "Unifont"
SUPPORTED_LANG = {
    "en_us": "English (United States)",
    "zh_cn": "简体中文 (中国大陆)",
    "zh_hk": "繁體中文 (中國香港)",
    "zh_tw": "繁體中文 (中國臺灣)",
}


class ResourceManager:
    """Manage resources."""

    def __init__(self):
        if getattr(sys, "frozen", False) and hasattr(sys, "_MEIPASS"):
            path = "assets"
        else:
            path = "mystery/assets"
        self.loader = Loader(path)
        self._lang = "en_us"
        self._translation_en_us = load(self.loader.file("i18n/en_us.json", mode="r"))
        self._translation_now = {}

        # Load uninstalled font.
        if not have_font("Unifont"):
            self.loader.add_font("unifont.otf")
        self.font = load_font("Unifont")

    @property
    def language(self) -> str:
        return self._lang

    @language.setter
    def language(self, name: str):
        if name not in SUPPORTED_LANG:
            return
        self._lang = name
        if self._lang == "en_us":
            self._translation_now = self._translation_en_us
            return
        contents = self.loader.file(f"i18n/{self._lang}.json", mode="rb").read()
        s = contents.decode("utf-8")
        self._translation_now = loads(s)

    def info(self, key: str):
        return self._translation_now["language.info"].get(key, "")

    def translate(self, name: str, **kwargs: dict) -> str:
        """Get the translation of `name`.

        Localized strings are generated by the following order:
        1. the language chosen by the player
        2. English
        3. `name` parameter
        """
        s = self._translation_now.get(name, self._translation_en_us.get(name, name))
        if s != name:
            try:
                return s.format(**kwargs)
            except:
                return name
        else:
            return name


__all__ = "FONT_NAME", "SUPPORTED_LANG", "ResourceManager"
